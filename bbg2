#include <stdio.h>
#include <time.h>
#include <stdlib.h>

void print_game_table(char **matrix, int row, int column);
void randomize_game_table(char **matrix, int row, int column);
void randomize_empty_slots(char **matrix, int row, int column, int *change);
void check_neighbors(char **matrix, int i, int j, int reference, int i_max, int j_max, int *change);
void gez(char **matrix, int row, int column, int *change);
void gravity(char **matrix, int row, int column, int *change);
void swap(char *char1, char *char2);

void main(){
    int i, j, row, column, change, i1, j1, i2, j2;
    char **matrix, devam;
    srand(time(NULL));
    printf("Oyun alaninin satir ve sutun sayisini veriniz:  "); scanf("%d %d", &row, &column);
    matrix = (char **) malloc(row * sizeof(char *));
    for(i = 0; i < row; i++){
        matrix[i] = (char *) malloc(column * sizeof(char));
    }
    randomize_game_table(matrix, row, column);
    do{
        do{
            do{
                print_game_table(matrix, row, column);
                gez(matrix, row, column, &change);
                if(change){
                    print_game_table(matrix, row, column);
                }
                gravity(matrix, row, column, &change);
            } while(change);
            randomize_empty_slots(matrix, row, column, &change);
        } while(change);
        for(i = 1; i < 2 * column; i++){ printf("—"); } printf("\n");
        printf("Devam etmek istiyor musunuz? (E/H) --> "); getchar(); scanf("%c", &devam);
        if(devam == 'E' || devam == 'e'){
            printf("Yer degistirilecek elemanlarin indislerini veriniz: "); scanf("%d,%d %d,%d", &i1, &j1, &i2, &j2);
            swap(&matrix[i1][j1], &matrix[i2][j2]);
        }
    } while(devam == 'E' || devam == 'e');
}




void print_game_table(char **matrix, int row, int column){
    int i,j;
    for(i = 1; i < 2 * column; i++){
        printf("—");
    }
    printf("\n");
    for(i = 0; i < row; i++){
        for(j = 0; j < column; j++){
            printf("%c ", matrix[i][j]);
        }
        printf("\n");
    }
}

void randomize_game_table(char **matrix, int row, int column){
    int i, j;
    for(i = 0; i < row; i++){
        for(j = 0; j < column; j++){
            matrix[i][j] = rand()%10 + '0';
        }
    }
}

void randomize_empty_slots(char **matrix, int row, int column, int *change){
    int i, j;
    *change = 0;
    for(i = 0; i < row; i++){
        for(j = 0; j < column; j++){
            if(matrix[i][j] == ' '){
                matrix[i][j] = rand()%10 + '0';
                *change = 1;
            }
        }
    }
}

void check_neighbors(char **matrix, int i, int j, int reference, int i_max, int j_max, int *change){
    int has_neighbor = 0;
    if(j < j_max){
        if(matrix[i][j] == matrix[i][j + 1] && reference != 3){
            check_neighbors(matrix, i, j + 1, 1, i_max, j_max, change);
            has_neighbor = 1;
        }
    }
    if(j > 0){
        if(matrix[i][j] == matrix[i][j - 1] && reference != 1){
            check_neighbors(matrix, i, j - 1, 3, i_max, j_max, change);   
            has_neighbor = 1;
        }
    }
    if(i < i_max){
        if(matrix[i][j] == matrix[i + 1][j] && reference != 4){
            check_neighbors(matrix, i + 1, j, 2, i_max, j_max, change);
            has_neighbor = 1;
        }
    }
    if(i > 0){
        if(matrix[i][j] == matrix[i - 1][j] && reference != 2){
            check_neighbors(matrix, i - 1, j, 4, i_max, j_max, change);
            has_neighbor = 1;
        }
    }
    if(reference != 0 || has_neighbor){
        matrix[i][j] = ' ';
        *change = 1;
    }
}

void gez(char **matrix, int row, int column, int *change){
    int i, j;
    *change = 0;
    for(i = 0; i < row; i++){
        for(j = 0; j < column; j++){
            if(matrix[i][j] != ' '){
                check_neighbors(matrix, i, j, 0, row - 1, column - 1, change);
            }
        }
    }
}

void gravity(char **matrix, int row, int column, int *change){
    int i, j, k;
    *change = 0;
    for(j = 0; j < column; j++){
        for(i = row - 1; i >= 0; i--){
            if(matrix[i][j] == ' '){
                for(k = i - 1; k >= 0; k--){
                    if(matrix[k][j] != ' '){
                        swap(&matrix[i][j], &matrix[k][j]);
                        *change = 1;
                        break;
                    }
                }
            }
        }
    }
}

void swap(char *char1, char *char2){
    *char1 = *char1 ^ *char2;
    *char2 = *char1 ^ *char2;
    *char1 = *char1 ^ *char2;
}
